$WarningPreference = 'SilentlyContinue'
Function Remove-FileChangeAudit_v3 {
    Param(
        [Parameter(Mandatory = $false)]
        [Switch] $Slot,
        [string] $subscriptionId,
        [string] $appServiceRG,
        [string] $aspName
    )
    # Connect using a Managed Service Identity
    try {
        $AzureContext = (Connect-AzAccount -Identity -ErrorAction SilentlyContinue).context # Connect using a Managed Service Identity
    }
    catch {
        Write-Output 'There is no system-assigned user identity. Aborting. Setup the same or try using RunAs account automation method.';
    }
    try {
        Set-AzContext $subscriptionId
        $azContext = Get-AzContext
        $azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
        $profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)
        $token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)
        $authHeader = @{
            'Content-Type'  = 'application/json'
            'Authorization' = 'Bearer ' + $token.AccessToken
        }
        $asp = Get-AzAppServicePlan -ResourceGroupName $appServiceRG -Name $aspName -ErrorAction Stop
        $web = Get-AzWebApp -AppServicePlan $asp -ErrorAction SilentlyContinue
        foreach ($webApp in ($web | Where-Object { ($_.State -eq 'Running') })) {
            Write-Output ('*' * 75)
            Write-Output ('App Name : {0}' -F $webApp.Name)
            Write-Output ('*' * 75)
            $restUri = "https://management.azure.com/subscriptions/$($subscriptionId)/resourceGroups/$($appServiceRG)/providers/Microsoft.Web/sites/$($webApp.Name)/config/web?api-version=2022-03-01"
            $response = Invoke-RestMethod -Uri $restUri -Method Get -Headers $authHeader
            $rules = $response | Where-Object { ($_.properties.ipSecurityRestrictions.name -ne 'Deny All') } # Holds the backup of all the access restriction in the web app
            #########################################################################################################
            # Removal of Access Restrictions
            #########################################################################################################
            if (($rules.properties.ipSecurityRestrictions).Count -gt 1) {
                Write-Host "Found Access Restriction rules for $($webApp.Name). Taking backup for the same."
                foreach ($rule in $rules.properties.ipSecurityRestrictions) {
                    Write-Host 'Constructing Body for PUT Method'
                    if (!($rule.vnetSubnetResourceId)) {
                        Write-Host '  Removing all VNET based rules' -ForegroundColor Green
                        $removeRestURI = "https://management.azure.com/subscriptions/$($subscriptionId)/resourceGroups/$($appServiceRG)/providers/Microsoft.Web/sites/$($webApp.Name)/config/web?api-version=2022-03-01"
                        $removeResponce = Invoke-RestMethod -Uri $removeRestURI -Method Put -Headers $authHeader
                        $removalStatus = $removeResponce | Where-Object { ($_.properties.ipSecurityRestrictions.name -ne 'Deny All') } # Holds the backup of all the access restriction in the web app
                        $body = @{
                            'properties' = @{
                                'ipSecurityRestrictions' = @(
                                    @{
                                        'ipAddress'   = $rule.ipAddress
                                        'action'      = $rule.action
                                        'tag'         = $rule.tag
                                        'priority'    = $rule.priority
                                        'name'        = $rule.name
                                        'description' = $rule.description
                                    }
                                )
                            }
                        }
                        $body | ConvertTo-Json -Depth 10
                    }
                }
                # Clear-Variable -Name data
            }
            #########################################################################################################
            # Removal of FileChangeAudit
            # to handle production (not slots)
            #########################################################################################################
            if ($Slot -ne $true) {
                $config = Get-AzResource -ResourceGroupName $appServiceRG `
                    -ResourceType 'Microsoft.Web/sites/config' `
                    -ResourceName "$($webApp.Name)/web" `
                    -ApiVersion 2016-08-01
            }
            # to handle the slots
            if ($Slot -eq $true) {
                # for app slots
                $appServiceName = "$($webApp.Name)/staging"
                $config = Get-AzResource -ResourceGroupName $appServiceRG `
                    -ResourceType 'Microsoft.Web/sites/slots' `
                    -ResourceName "$($appServiceName)" `
                    -ApiVersion 2016-08-01 -ErrorAction SilentlyContinue
            }
            Write-Host "       Current FILECHANGEAUDIT Status for the $($webApp.Name) : $($config.Properties.fileChangeAuditEnabled)"
            $config.Properties.fileChangeAuditEnabled = 'false'
            $config.Properties.PSObject.Properties.Remove('ReservedInstanceCount')
            $newCategories = @()
            ForEach ($entry in $config.Properties.azureMonitorLogCategories) {
                If ($entry -ne 'AppServiceFileAuditLogs') {
                    $newCategories += $entry
                }
            }
            $config.Properties.azureMonitorLogCategories = $newCategories
            $config | Set-AzResource -Force
            #########################################################################################################
            #########################################################################################################
            # Restoring Access Restrictions
            #########################################################################################################

            if (($rules.properties.ipSecurityRestrictions).Count -gt 1) {
                Write-Host "Found Access Restriction rules for $($webApp.Name). Taking backup for the same."
                foreach ($rule in $rules.properties.ipSecurityRestrictions) {
                    Write-Host 'Constructing Body for PUT Method'
                    if ($rule.vnetSubnetResourceId) {
                        Write-Host '  Body for VNET Rule' -ForegroundColor Green
                        $body = @{
                            'properties' = @{
                                'ipSecurityRestrictions' = @(
                                    @{
                                        'vnetSubnetResourceId' = $rule.vnetSubnetResourceId
                                        'action'               = $rule.action
                                        'tag'                  = $rule.tag
                                        'priority'             = $rule.priority
                                        'name'                 = $rule.name
                                        'description'          = $rule.description
                                    }
                                )
                            }
                        }
                        $body | ConvertTo-Json -Depth 10
                    }
                    else {
                        $body = @{
                            'properties' = @{
                                'ipSecurityRestrictions' = @(
                                    @{
                                        'ipAddress'   = $rule.ipAddress
                                        'action'      = $rule.action
                                        'tag'         = $rule.tag
                                        'priority'    = $rule.priority
                                        'name'        = $rule.name
                                        'description' = $rule.description
                                    }
                                )
                            }
                        }
                        $body | ConvertTo-Json -Depth 10
                    }
                }
                # Clear-Variable -Name data
            }
        }
        catch {
            Write-Output "Error: $($_.Exception.Message)"
        }
    }